{"version":3,"sources":["ng://@bolstra/angular-editor/lib/angular-editor.service.ts","ng://@bolstra/angular-editor/lib/config.ts","ng://@bolstra/angular-editor/lib/angular-editor.component.ts","ng://@bolstra/angular-editor/lib/angular-editor-toolbar.component.ts","ng://@bolstra/angular-editor/lib/angular-editor.module.ts"],"names":["AngularEditorService","http","document","this","prototype","executeCommand","command","includes","execCommand","createLink","url","newUrl","selectedText","insertHtml","insertColor","color","where","restoreSelection","setFontName","fontName","setFontSize","fontSize","html","Error","saveSelection","window","getSelection","sel","getRangeAt","rangeCount","savedSelection","toString","createRange","removeAllRanges","addRange","checkSelection","length","uploadImage","file","uploadData","FormData","append","name","post","uploadUrl","reportProgress","observe","insertImage","imageUrl","insertVideo","videoUrl","match","insertYouTubeVideoTag","insertVimeoVideoTag","insertTag","tag","tagS","group","size","tagHtml","propertyName","setDefaultParagraphSeparator","separator","createCustomClass","customClass","newTag","tagName","class","id","split","thumbnail","_this","sub","get","subscribe","data","thumbnail_url_with_play_button","title","unsubscribe","Injectable","args","providedIn","HttpClient","Inject","DOCUMENT","angularEditorConfig","editable","spellcheck","height","minHeight","maxHeight","width","minWidth","translate","enableToolbar","showToolbar","placeholder","defaultParagraphSeparator","defaultFontName","defaultFontSize","fonts","AngularEditorComponent","_renderer","editorService","_document","modeVisual","showPlaceholder","config","viewMode","EventEmitter","blur","focus","ngOnInit","editorToolbar","customClasses","tagList","undefined","ngAfterContentInit","defaultFontId","findIndex","x","fontId","onEditorFocus","toggleEditorMode","exec","onTextAreaFocus","emit","onTextAreaBlur","event","onTouched","relatedTarget","parentElement","className","textArea","nativeElement","onContentChange","onChange","togglePlaceholder","registerOnChange","fn","registerOnTouched","writeValue","value","refreshView","normalizedValue","setProperty","removeClass","editorWrapper","addClass","setDisabledState","isDisabled","div","action","bToSource","oContent","editableElement","createTextNode","innerHTML","oPre","createElement","setAttribute","oCode","contentEditable","appendChild","all","innerText","selectNodeContents","firstChild","setEditorMode","userSelection","triggerButtons","a","focusNode","els","unshift","parentNode","triggerBlocks","onKeyDown","e","code","Component","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","Renderer2","Input","Output","ViewChild","AngularEditorToolbarComponent","renderer","htmlMode","linkSelected","block","customClassId","currentTag","tagGroups","tagMap","BLOCKQUOTE","A","select","buttons","execute","tags","forEach","t","find","g","push","triggerCommand","result","queryCommandState","elementById","getElementById","nodes","nodeName","found","y","node","toLowerCase","index","HTMLFontElement","face","Element","Object","keys","map","insertUrl","prompt","m","toggleEditorModeButton","onFileChanged","target","files","type","HttpResponse","body","fileReset","myInputFile","setCustomClass","classId","AngularEditorModule","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","declarations","exports"],"mappings":"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","sourcesContent":["import {Inject, Injectable} from '@angular/core';\nimport {HttpClient, HttpEvent} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {CustomClass, Tag} from './config';\n\nexport interface UploadResponse {\n  imageUrl: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AngularEditorService {\n\n  savedSelection: Range | null;\n  selectedText: string;\n  uploadUrl: string;\n\n\n  constructor(private http: HttpClient, @Inject(DOCUMENT) private document: any) {\n  }\n\n  /**\n   * Executed command from editor header buttons exclude toggleEditorMode\n   * @param command string from triggerCommand\n   */\n  executeCommand(command: string) {\n    const commands = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'pre'];\n    if (commands.includes(command)) {\n      this.document.execCommand('formatBlock', false, command);\n    }\n\n    this.document.execCommand(command, false, null);\n  }\n\n  /**\n   * Create URL link\n   * @param url string from UI prompt\n   */\n  createLink(url: string) {\n    if (!url.includes('http')) {\n      this.document.execCommand('createlink', false, url);\n    } else {\n      const newUrl = `<a href='${url}' target='_blank'>${this.selectedText}</a>`;\n      this.insertHtml(newUrl);\n    }\n  }\n\n  /**\n   * insert color either font or background\n   *\n   * @param color color to be inserted\n   * @param where where the color has to be inserted either text/background\n   */\n  insertColor(color: string, where: string): void {\n    const restored = this.restoreSelection();\n    if (restored) {\n      if (where === 'textColor') {\n        this.document.execCommand('foreColor', false, color);\n      } else {\n        this.document.execCommand('hiliteColor', false, color);\n      }\n    }\n  }\n\n  /**\n   * Set font name\n   * @param fontName string\n   */\n  setFontName(fontName: string) {\n    this.document.execCommand('fontName', false, fontName);\n  }\n\n  /**\n   * Set font size\n   * @param fontSize string\n   */\n  setFontSize(fontSize: string) {\n    this.document.execCommand('fontSize', false, fontSize);\n  }\n\n  /**\n   * Create raw HTML\n   * @param html HTML string\n   */\n  insertHtml(html: string): void {\n\n    const isHTMLInserted = this.document.execCommand('insertHTML', false, html);\n\n    if (!isHTMLInserted) {\n      throw new Error('Unable to perform the operation');\n    }\n  }\n\n  /**\n   * save selection when the editor is focussed out\n   */\n  saveSelection(): any {\n    if (window.getSelection) {\n      const sel = window.getSelection();\n      if (sel.getRangeAt && sel.rangeCount) {\n        this.savedSelection = sel.getRangeAt(0);\n        this.selectedText = sel.toString();\n      }\n    } else if (this.document.getSelection && this.document.createRange) {\n      this.savedSelection = document.createRange();\n    } else {\n      this.savedSelection = null;\n    }\n  }\n\n  /**\n   * restore selection when the editor is focussed in\n   *\n   * saved selection when the editor is focussed out\n   */\n  restoreSelection(): boolean {\n    if (this.savedSelection) {\n      if (window.getSelection) {\n        const sel = window.getSelection();\n        sel.removeAllRanges();\n        sel.addRange(this.savedSelection);\n        return true;\n      } else if (this.document.getSelection /*&& this.savedSelection.select*/) {\n        // this.savedSelection.select();\n        return true;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /** check any slection is made or not */\n  private checkSelection(): any {\n\n    const slectedText = this.savedSelection.toString();\n\n    if (slectedText.length === 0) {\n      throw new Error('No Selection Made');\n    }\n\n    return true;\n  }\n\n  /**\n   * Upload file to uploadUrl\n   * @param file\n   */\n  uploadImage(file: File): Observable<HttpEvent<UploadResponse>> {\n\n    const uploadData: FormData = new FormData();\n\n    uploadData.append('file', file, file.name);\n    return this.http.post<UploadResponse>(this.uploadUrl, uploadData, {\n      reportProgress: true,\n      observe: 'events',\n    });\n  }\n\n  /**\n   * Insert image with Url\n   * @param imageUrl\n   */\n  insertImage(imageUrl: string) {\n    this.document.execCommand('insertImage', false, imageUrl);\n  }\n\n  insertVideo(videoUrl: string) {\n    if (videoUrl.match('www.youtube.com')) {\n      this.insertYouTubeVideoTag(videoUrl);\n    }\n    if (videoUrl.match('vimeo.com')) {\n      this.insertVimeoVideoTag(videoUrl);\n    }\n  }\n\n  insertTag(tag: Tag) {\n    if (tag === null) {\n      return;\n    }\n    const tagS = `${tag.group} -> ${tag.name}`;\n    const size = tagS.length;\n    const tagHtml = `\n      <input id='bolstra.${tag.propertyName}' value='${tagS}'\n        readonly size=${size}\n        style='background-color:lightgrey;\n        padding: 5px;\n        border-radius: 5px;\n        text-align: center;\n        border-left:5px solid red;\n        border-right:5px solid red;\n        border-top:0;\n        border-bottom:0;'\n        ></input>\n    `;\n    this.insertHtml(tagHtml);\n  }\n\n  setDefaultParagraphSeparator(separator: string) {\n    this.document.execCommand('defaultParagraphSeparator', false, separator);\n  }\n\n  createCustomClass(customClass: CustomClass) {\n    let newTag = this.selectedText;\n    if (customClass) {\n      const tagName = customClass.tag ? customClass.tag : 'span';\n      newTag = `<${tagName} class='${customClass.class}'>${this.selectedText}</${tagName}>`;\n    }\n    this.insertHtml(newTag);\n  }\n\n  private insertYouTubeVideoTag(videoUrl: string): void {\n    const id = videoUrl.split('v=')[1];\n    const imageUrl = `https://img.youtube.com/vi/${id}/0.jpg`;\n    const thumbnail = `\n      <div style='position: relative'>\n        <img style='position: absolute; left:200px; top:140px'\n             src=\"https://img.icons8.com/color/96/000000/youtube-play.png\"\n        <a href='${videoUrl}' target='_blank'>\n          <img src=\"${imageUrl}\" alt=\"click to watch\"/>\n        </a>\n      </div>`;\n    this.insertHtml(thumbnail);\n  }\n\n  private insertVimeoVideoTag(videoUrl: string): void {\n    const sub = this.http.get<any>(`https://vimeo.com/api/oembed.json?url=${videoUrl}`).subscribe(data => {\n      const imageUrl = data.thumbnail_url_with_play_button;\n      const thumbnail = `<div>\n        <a href='${videoUrl}' target='_blank'>\n          <img src=\"${imageUrl}\" alt=\"${data.title}\"/>\n        </a>\n      </div>`;\n      this.insertHtml(thumbnail);\n      sub.unsubscribe();\n    });\n  }\n}\n","import { Observable } from 'rxjs';\n\nexport interface CustomClass {\n  name: string;\n  class: string;\n  tag?: string;\n}\n\nexport interface Font {\n  name: string;\n  class: string;\n}\nexport interface Tag {\n  propertyName: string;\n  name: string;\n  group: string;\n}\n\nexport interface AngularEditorConfig {\n  editable?: boolean;\n  spellcheck?: boolean;\n  height?: 'auto' | string;\n  minHeight?: '0' | string;\n  maxHeight?: 'auto' | string;\n  width?: 'auto' | string;\n  minWidth?: '0' | string;\n  translate?: 'yes' | 'now' | string;\n  enableToolbar?: boolean;\n  showToolbar?: boolean;\n  placeholder?: string;\n  defaultParagraphSeparator?: string;\n  defaultFontName?: string;\n  defaultFontSize?: '1' | '2' | '3' | '4' | '5' | '6' | '7' |string;\n  uploadUrl?: string;\n  fonts?: Font[];\n  customClasses?: CustomClass[];\n  tagList?: Observable<Tag[]>;\n}\n\nexport const angularEditorConfig: AngularEditorConfig = {\n  editable: true,\n  spellcheck: true,\n  height: 'auto',\n  minHeight: '0',\n  maxHeight: 'auto',\n  width: 'auto',\n  minWidth: '0',\n  translate: 'yes',\n  enableToolbar: true,\n  showToolbar: true,\n  placeholder: 'Enter text here...',\n  defaultParagraphSeparator: '',\n  defaultFontName: '',\n  defaultFontSize: '',\n  fonts: [\n    {class: 'arial', name: 'Arial'},\n    {class: 'times-new-roman', name: 'Times New Roman'},\n    {class: 'calibri', name: 'Calibri'},\n    {class: 'comic-sans-ms', name: 'Comic Sans MS'}\n  ],\n  uploadUrl: 'v1/image'\n};\n","import {\n  AfterContentInit,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {AngularEditorConfig, angularEditorConfig} from './config';\nimport {AngularEditorToolbarComponent} from './angular-editor-toolbar.component';\nimport {AngularEditorService} from './angular-editor.service';\nimport {DOCUMENT} from '@angular/common';\n\n@Component({\n  selector: 'angular-editor',\n  templateUrl: './angular-editor.component.html',\n  styleUrls: ['./angular-editor.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AngularEditorComponent),\n      multi: true\n    }\n  ]\n})\nexport class AngularEditorComponent implements OnInit, ControlValueAccessor, AfterContentInit {\n\n  private onChange: (value: string) => void;\n  private onTouched: () => void;\n\n  placeholder: boolean;\n\n  modeVisual = true;\n  showPlaceholder = false;\n  @Input() id = '';\n  @Input() config: AngularEditorConfig = angularEditorConfig;\n\n  @Output() html;\n\n  @ViewChild('editor') textArea: any;\n  @ViewChild('editorWrapper') editorWrapper: any;\n  @ViewChild('editorToolbar') editorToolbar: AngularEditorToolbarComponent;\n\n  @Output() viewMode = new EventEmitter<boolean>();\n\n  /** emits `blur` event when focused out from the textarea */\n  @Output() blur: EventEmitter<string> = new EventEmitter<string>();\n\n  /** emits `focus` event when focused in to the textarea */\n  @Output() focus: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor(private _renderer: Renderer2, private editorService: AngularEditorService, @Inject(DOCUMENT) private _document: any) {\n  }\n\n  ngOnInit() {\n    this.editorToolbar.id = this.id;\n    this.editorToolbar.fonts = this.config.fonts ? this.config.fonts : angularEditorConfig.fonts;\n    this.editorToolbar.customClasses = this.config.customClasses;\n    this.editorToolbar.tagList = this.config.tagList;\n    this.editorService.uploadUrl = this.config.uploadUrl;\n    if (this.config.showToolbar !== undefined) {\n      this.editorToolbar.showToolbar = this.config.showToolbar;\n    }\n    if (this.config.defaultParagraphSeparator) {\n      this.editorService.setDefaultParagraphSeparator(this.config.defaultParagraphSeparator);\n    }\n  }\n\n  ngAfterContentInit() {\n    if (this.config.defaultFontName) {\n      this.editorToolbar.defaultFontId = this.config.defaultFontName ? this.editorToolbar.fonts.findIndex(x => {\n        return x.name === this.config.defaultFontName;\n      }) : 0;\n      this.editorToolbar.fontId = this.editorToolbar.defaultFontId;\n      this.onEditorFocus();\n      this.editorService.setFontName(this.config.defaultFontName);\n    } else {\n      this.editorToolbar.defaultFontId = 0;\n      this.editorToolbar.fontId = 0;\n    }\n    if (this.config.defaultFontSize) {\n      this.editorToolbar.fontSize = this.config.defaultFontSize;\n      this.onEditorFocus();\n      this.editorService.setFontSize(this.config.defaultFontSize);\n    }\n  }\n\n  /**\n   * Executed command from editor header buttons\n   * @param command string from triggerCommand\n   */\n  executeCommand(command: string) {\n    if (command === 'toggleEditorMode') {\n      this.toggleEditorMode(this.modeVisual);\n    } else if (command !== '') {\n      this.editorService.executeCommand(command);\n      this.exec();\n    }\n\n    this.onEditorFocus();\n  }\n\n  /**\n   * focus event\n   */\n  onTextAreaFocus(): void {\n    this.focus.emit('focus');\n  }\n\n  /**\n   * blur event\n   */\n  onTextAreaBlur(event: FocusEvent) {\n    /**\n     * save selection if focussed out\n     */\n    this.editorService.saveSelection();\n\n    if (typeof this.onTouched === 'function') {\n      this.onTouched();\n    }\n\n    if (event.relatedTarget != null && (event.relatedTarget as HTMLElement).parentElement.className !== 'angular-editor-toolbar-set') {\n      this.blur.emit('blur');\n    }\n  }\n\n  /**\n   *  focus the text area when the editor is focussed\n   */\n  onEditorFocus() {\n    this.textArea.nativeElement.focus();\n  }\n\n  /**\n   * Executed from the contenteditable section while the input property changes\n   * @param html html string from contenteditable\n   */\n  onContentChange(html: string): void {\n\n    if (typeof this.onChange === 'function') {\n      this.onChange(html);\n      if ((!html || html === '<br>' || html === '') !== this.showPlaceholder) {\n        this.togglePlaceholder(this.showPlaceholder);\n      }\n    }\n  }\n\n  /**\n   * Set the function to be called\n   * when the control receives a change event.\n   *\n   * @param fn a function\n   */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * Set the function to be called\n   * when the control receives a touch event.\n   *\n   * @param fn a function\n   */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Write a new value to the element.\n   *\n   * @param value value to be executed when there is a change in contenteditable\n   */\n  writeValue(value: any): void {\n\n    if ((!value || value === '<br>' || value === '') !== this.showPlaceholder) {\n      this.togglePlaceholder(this.showPlaceholder);\n    }\n\n    if (value === null || value === undefined || value === '' || value === '<br>') {\n      value = null;\n    }\n\n    this.refreshView(value);\n  }\n\n  /**\n   * refresh view/HTML of the editor\n   *\n   * @param value html string from the editor\n   */\n  refreshView(value: string): void {\n    const normalizedValue = value === null ? '' : value;\n    this._renderer.setProperty(this.textArea.nativeElement, 'innerHTML', normalizedValue);\n\n    return;\n  }\n\n  /**\n   * toggles placeholder based on input string\n   *\n   * @param value A HTML string from the editor\n   */\n  togglePlaceholder(value: boolean): void {\n    if (!value) {\n      this._renderer.addClass(this.editorWrapper.nativeElement, 'show-placeholder');\n      this.showPlaceholder = true;\n\n    } else {\n      this._renderer.removeClass(this.editorWrapper.nativeElement, 'show-placeholder');\n      this.showPlaceholder = false;\n    }\n  }\n\n  /**\n   * Implements disabled state for this element\n   *\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean): void {\n    const div = this.textArea.nativeElement;\n    const action = isDisabled ? 'addClass' : 'removeClass';\n    this._renderer[action](div, 'disabled');\n  }\n\n  /**\n   * toggles editor mode based on bToSource bool\n   *\n   * @param bToSource A boolean value from the editor\n   */\n  toggleEditorMode(bToSource: boolean) {\n    let oContent: any;\n    const editableElement = this.textArea.nativeElement;\n\n    if (bToSource) {\n      oContent = this._document.createTextNode(editableElement.innerHTML);\n      editableElement.innerHTML = '';\n\n      const oPre = this._document.createElement('pre');\n      oPre.setAttribute('style', 'margin: 0; outline: none;');\n      const oCode = this._document.createElement('code');\n      editableElement.contentEditable = false;\n      oCode.id = 'sourceText';\n      oCode.setAttribute('style', 'white-space: pre-wrap; word-break: keep-all; margin: 0; outline: none; background-color: #fff5b9;');\n      oCode.contentEditable = 'true';\n      oCode.appendChild(oContent);\n      oPre.appendChild(oCode);\n      editableElement.appendChild(oPre);\n\n      this._document.execCommand('defaultParagraphSeparator', false, 'div');\n\n      this.modeVisual = false;\n      this.viewMode.emit(false);\n      oCode.focus();\n    } else {\n      if (this._document.all) {\n        editableElement.innerHTML = editableElement.innerText;\n      } else {\n        oContent = this._document.createRange();\n        oContent.selectNodeContents(editableElement.firstChild);\n        editableElement.innerHTML = oContent.toString();\n      }\n      editableElement.contentEditable = true;\n      this.modeVisual = true;\n      this.viewMode.emit(true);\n      this.onContentChange(editableElement.innerHTML);\n      editableElement.focus();\n    }\n    this.editorToolbar.setEditorMode(!this.modeVisual);\n  }\n\n  /**\n   * toggles editor buttons when cursor moved or positioning\n   *\n   * Send a node array from the contentEditable of the editor\n   */\n  exec() {\n    this.editorToolbar.triggerButtons();\n\n    let userSelection;\n    if (window.getSelection) {\n      userSelection = window.getSelection();\n    }\n\n    let a = userSelection.focusNode;\n    const els = [];\n    while (a && a.id !== 'editor') {\n      els.unshift(a);\n      a = a.parentNode;\n    }\n    this.editorToolbar.triggerBlocks(els);\n  }\n\n  onKeyDown(e: KeyboardEvent) {\n    if (e.code === 'Enter') {\n      this.editorService.insertHtml('<br><br>');\n      return false;\n    }\n  }\n}\n","import {Component, OnInit, ElementRef, EventEmitter, Inject, Input, Output, Renderer2, ViewChild} from '@angular/core';\nimport {AngularEditorService} from './angular-editor.service';\nimport {HttpResponse} from '@angular/common/http';\nimport {DOCUMENT} from '@angular/common';\nimport {CustomClass, Font, Tag} from './config';\nimport {Observable} from 'rxjs';\n\n@Component({\n  selector: 'angular-editor-toolbar',\n  templateUrl: './angular-editor-toolbar.component.html',\n  styleUrls: ['./angular-editor-toolbar.component.scss']\n})\n\nexport class AngularEditorToolbarComponent implements OnInit {\n  id = '';\n  htmlMode = false;\n  showToolbar = true;\n  linkSelected = false;\n  block = 'default';\n  defaultFontId;\n  fontId = 0;\n  fontSize = '5';\n  fonts: Font[];\n  tagList?: Observable<Tag[]>;\n\n  customClassId = -1;\n  customClasses: CustomClass[];\n  currentTag: Tag = null;\n  tagGroups: any[] = [];\n\n  tagMap = {\n    BLOCKQUOTE: 'indent',\n    A: 'link'\n  };\n\n  select = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'P', 'PRE', 'DIV'];\n\n  buttons = ['bold', 'italic', 'underline', 'strikeThrough', 'subscript', 'superscript', 'justifyLeft', 'justifyCenter',\n    'justifyRight', 'justifyFull', 'indent', 'outdent', 'insertUnorderedList', 'insertOrderedList', 'link'];\n\n  @Output() execute: EventEmitter<string> = new EventEmitter<string>();\n\n  @ViewChild('fileInput') myInputFile: ElementRef;\n\n\n  constructor(private renderer: Renderer2,\n              private editorService: AngularEditorService, @Inject(DOCUMENT) private document: any) {\n  }\n\n  ngOnInit() {\n    if (this.tagList ) {\n      this.tagList.subscribe(tags => {\n        tags.forEach(t => {\n          let group = this.tagGroups.find(g => g.name === t.group);\n          if (!group) {\n            group = {name: t.group, tags: []};\n            this.tagGroups.push(group);\n          }\n          group.tags.push(t);\n        });\n      });\n    }\n  }\n  /**\n   * Trigger command from editor header buttons\n   * @param command string from toolbar buttons\n   */\n  triggerCommand(command: string) {\n    this.execute.emit(command);\n  }\n\n  /**\n   * highlight editor buttons when cursor moved or positioning\n   */\n  triggerButtons() {\n    if (!this.showToolbar) {\n      return;\n    }\n    this.buttons.forEach(e => {\n      const result = this.document.queryCommandState(e);\n      const elementById = this.document.getElementById(e + '-' + this.id);\n      if (result) {\n        this.renderer.addClass(elementById, 'active');\n      } else {\n        this.renderer.removeClass(elementById, 'active');\n      }\n    });\n  }\n\n  /**\n   * trigger highlight editor buttons when cursor moved or positioning in block\n   */\n  triggerBlocks(nodes: Node[]) {\n    if (!this.showToolbar) {\n      return;\n    }\n    this.linkSelected = nodes.findIndex(x => x.nodeName === 'A') > -1;\n    let found = false;\n    this.select.forEach(y => {\n      const node = nodes.find(x => x.nodeName === y);\n      if (node !== undefined && y === node.nodeName) {\n        if (found === false) {\n          this.block = node.nodeName.toLowerCase();\n          found = true;\n        }\n      } else if (found === false) {\n        this.block = 'default';\n      }\n    });\n\n    found = false;\n    if (this.fonts) {\n      this.fonts.forEach((y, index) => {\n        const node = nodes.find(x => {\n          if (x instanceof HTMLFontElement) {\n            return x.face === y.name;\n          }\n        });\n        if (node !== undefined) {\n          if (found === false) {\n            this.fontId = index;\n            found = true;\n          }\n        } else if (found === false) {\n          this.fontId = this.defaultFontId;\n        }\n      });\n    }\n\n    found = false;\n    if (this.customClasses) {\n      this.customClasses.forEach((y, index) => {\n        const node = nodes.find(x => {\n          if (x instanceof Element) {\n            return x.className === y.class;\n          }\n        });\n        if (node !== undefined) {\n          if (found === false) {\n            this.customClassId = index;\n            found = true;\n          }\n        } else if (found === false) {\n          this.customClassId = -1;\n        }\n      });\n    }\n\n    Object.keys(this.tagMap).map(e => {\n      const elementById = this.document.getElementById(this.tagMap[e] + '-' + this.id);\n      const node = nodes.find(x => x.nodeName === e);\n      if (node !== undefined && e === node.nodeName) {\n        this.renderer.addClass(elementById, 'active');\n      } else {\n        this.renderer.removeClass(elementById, 'active');\n      }\n    });\n  }\n\n  /**\n   * insert URL link\n   */\n  insertUrl() {\n    const url = prompt('Insert URL link', `https://`);\n    if (url && url !== '' && url !== `https://`) {\n      this.editorService.createLink(url);\n    }\n  }\n\n  /**\n   * insert Vedio link\n   */\n  insertVideo() {\n    this.execute.emit('');\n    const url = prompt('Insert Video link', `https://`);\n    if (url && url !== '' && url !== `https://`) {\n      this.editorService.insertVideo(url);\n    }\n  }\n\n  /**\n   * insert Vedio link\n   */\n  insertTag() {\n    this.execute.emit('');\n    this.editorService.insertTag(this.currentTag);\n    this.currentTag = null;\n    this.execute.emit('');\n  }\n\n  /** insert color */\n  insertColor(color: string, where: string) {\n    this.editorService.insertColor(color, where);\n    this.execute.emit('');\n  }\n\n  /**\n   * set font Name/family\n   * @param fontId number\n   */\n  setFontName(fontId: number): void {\n    this.editorService.setFontName(this.fonts[fontId].name);\n    this.execute.emit('');\n  }\n\n  /**\n   * set font Size\n   * @param fontSize string\n   */\n  setFontSize(fontSize: string): void {\n    this.editorService.setFontSize(fontSize);\n    this.execute.emit('');\n  }\n\n  /**\n   * toggle editor mode (WYSIWYG or SOURCE)\n   * @param m boolean\n   */\n  setEditorMode(m: boolean) {\n    const toggleEditorModeButton = this.document.getElementById('toggleEditorMode' + '-' + this.id);\n    if (m) {\n      this.renderer.addClass(toggleEditorModeButton, 'active');\n    } else {\n      this.renderer.removeClass(toggleEditorModeButton, 'active');\n    }\n    this.htmlMode = m;\n  }\n\n  /**\n   * Upload image when file is selected\n   */\n  onFileChanged(event) {\n    const file = event.target.files[0];\n    if (file.type.includes('image/')) {\n      this.editorService.uploadImage(file).subscribe(e => {\n        if (e instanceof HttpResponse) {\n          this.execute.emit('');\n          this.editorService.insertImage(e.body.imageUrl);\n          this.fileReset();\n        }\n      });\n    }\n  }\n\n  /**\n   * Reset Input\n   */\n  fileReset() {\n    this.myInputFile.nativeElement.value = '';\n  }\n\n  /**\n   * Set custom class\n   */\n  setCustomClass(classId: number) {\n    this.editorService.createCustomClass(this.customClasses[classId]);\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {AngularEditorComponent} from './angular-editor.component';\nimport {AngularEditorToolbarComponent} from \"./angular-editor-toolbar.component\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {CommonModule} from \"@angular/common\";\n\n@NgModule({\n  imports: [\n    CommonModule, FormsModule, ReactiveFormsModule\n  ],\n  declarations: [AngularEditorComponent, AngularEditorToolbarComponent],\n  exports: [AngularEditorComponent, AngularEditorToolbarComponent]\n})\nexport class AngularEditorModule {\n}\n"]}