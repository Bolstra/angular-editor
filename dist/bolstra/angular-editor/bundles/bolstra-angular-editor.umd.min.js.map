{"version":3,"sources":["ng://@bolstra/angular-editor/lib/angular-editor.service.ts","ng://@bolstra/angular-editor/lib/config.ts","ng://@bolstra/angular-editor/lib/angular-editor.component.ts","ng://@bolstra/angular-editor/lib/angular-editor-toolbar.component.ts","ng://@bolstra/angular-editor/lib/angular-editor.module.ts"],"names":["AngularEditorService","http","_document","this","prototype","executeCommand","command","includes","execCommand","createLink","url","newUrl","selectedText","insertHtml","insertColor","color","where","restoreSelection","setFontName","fontName","setFontSize","fontSize","html","Error","saveSelection","window","getSelection","sel","getRangeAt","rangeCount","savedSelection","toString","createRange","document","removeAllRanges","addRange","checkSelection","length","uploadImage","file","uploadData","FormData","append","name","post","uploadUrl","reportProgress","observe","insertImage","imageUrl","console","log","insertVideo","videoUrl","match","insertYouTubeVideoTag","insertVimeoVideoTag","insertTag","tag","tagS","object","size","tagHtml","field","setDefaultParagraphSeparator","separator","createCustomClass","customClass","newTag","tagName","class","id","split","thumbnail","_this","sub","get","subscribe","data","thumbnail_url_with_play_button","title","unsubscribe","Injectable","args","providedIn","HttpClient","Inject","DOCUMENT","angularEditorConfig","editable","spellcheck","height","minHeight","maxHeight","width","minWidth","translate","enableToolbar","showToolbar","placeholder","defaultParagraphSeparator","defaultFontName","defaultFontSize","fonts","AngularEditorComponent","_renderer","editorService","modeVisual","showPlaceholder","config","viewMode","EventEmitter","blur","focus","ngOnInit","editorToolbar","customClasses","undefined","ngAfterContentInit","defaultFontId","findIndex","x","fontId","onEditorFocus","toggleEditorMode","exec","onTextAreaFocus","emit","onTextAreaBlur","event","onTouched","relatedTarget","parentElement","className","textArea","nativeElement","onContentChange","onChange","togglePlaceholder","registerOnChange","fn","registerOnTouched","writeValue","value","refreshView","normalizedValue","setProperty","removeClass","editorWrapper","addClass","setDisabledState","isDisabled","div","action","bToSource","oContent","editableElement","createTextNode","innerHTML","oPre","createElement","setAttribute","oCode","contentEditable","appendChild","all","innerText","selectNodeContents","firstChild","setEditorMode","userSelection","triggerButtons","a","focusNode","els","unshift","parentNode","triggerBlocks","onKeyDown","e","code","Component","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","Renderer2","Input","Output","ViewChild","AngularEditorToolbarComponent","htmlMode","linkSelected","block","customClassId","currentTag","tagMap","BLOCKQUOTE","A","select","buttons","tagGroups","tags","execute","triggerCommand","forEach","result","queryCommandState","elementById","getElementById","nodes","nodeName","found","y","node","find","toLowerCase","index","HTMLFontElement","face","Element","Object","keys","map","insertUrl","prompt","m","toggleEditorModeButton","onFileChanged","target","files","type","HttpResponse","body","fileReset","myInputFile","setCustomClass","classId","AngularEditorModule","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","declarations","exports"],"mappings":"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","sourcesContent":["import {Inject, Injectable} from '@angular/core';\nimport {HttpClient, HttpEvent} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {CustomClass} from './config';\n\nexport interface UploadResponse {\n  imageUrl: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AngularEditorService {\n\n  savedSelection: Range | null;\n  selectedText: string;\n  uploadUrl: string;\n\n\n  constructor(private http: HttpClient, @Inject(DOCUMENT) private _document: any) {\n  }\n\n  /**\n   * Executed command from editor header buttons exclude toggleEditorMode\n   * @param command string from triggerCommand\n   */\n  executeCommand(command: string) {\n    const commands = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'pre'];\n    if (commands.includes(command)) {\n      this._document.execCommand('formatBlock', false, command);\n    }\n\n    this._document.execCommand(command, false, null);\n  }\n\n  /**\n   * Create URL link\n   * @param url string from UI prompt\n   */\n  createLink(url: string) {\n    if (!url.includes('http')) {\n      this._document.execCommand('createlink', false, url);\n    } else {\n      const newUrl = `<a href='${url}' target='_blank'>${this.selectedText}</a>`;\n      this.insertHtml(newUrl);\n    }\n  }\n\n  /**\n   * insert color either font or background\n   *\n   * @param color color to be inserted\n   * @param where where the color has to be inserted either text/background\n   */\n  insertColor(color: string, where: string): void {\n    const restored = this.restoreSelection();\n    if (restored) {\n      if (where === 'textColor') {\n        this._document.execCommand('foreColor', false, color);\n      } else {\n        this._document.execCommand('hiliteColor', false, color);\n      }\n    }\n  }\n\n  /**\n   * Set font name\n   * @param fontName string\n   */\n  setFontName(fontName: string) {\n    this._document.execCommand('fontName', false, fontName);\n  }\n\n  /**\n   * Set font size\n   * @param fontSize string\n   */\n  setFontSize(fontSize: string) {\n    this._document.execCommand('fontSize', false, fontSize);\n  }\n\n  /**\n   * Create raw HTML\n   * @param html HTML string\n   */\n  insertHtml(html: string): void {\n\n    const isHTMLInserted = this._document.execCommand('insertHTML', false, html);\n\n    if (!isHTMLInserted) {\n      throw new Error('Unable to perform the operation');\n    }\n  }\n\n  /**\n   * save selection when the editor is focussed out\n   */\n  saveSelection(): any {\n    if (window.getSelection) {\n      const sel = window.getSelection();\n      if (sel.getRangeAt && sel.rangeCount) {\n        this.savedSelection = sel.getRangeAt(0);\n        this.selectedText = sel.toString();\n      }\n    } else if (this._document.getSelection && this._document.createRange) {\n      this.savedSelection = document.createRange();\n    } else {\n      this.savedSelection = null;\n    }\n  }\n\n  /**\n   * restore selection when the editor is focussed in\n   *\n   * saved selection when the editor is focussed out\n   */\n  restoreSelection(): boolean {\n    if (this.savedSelection) {\n      if (window.getSelection) {\n        const sel = window.getSelection();\n        sel.removeAllRanges();\n        sel.addRange(this.savedSelection);\n        return true;\n      } else if (this._document.getSelection /*&& this.savedSelection.select*/) {\n        // this.savedSelection.select();\n        return true;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /** check any slection is made or not */\n  private checkSelection(): any {\n\n    const slectedText = this.savedSelection.toString();\n\n    if (slectedText.length === 0) {\n      throw new Error('No Selection Made');\n    }\n\n    return true;\n  }\n\n  /**\n   * Upload file to uploadUrl\n   * @param file\n   */\n  uploadImage(file: File): Observable<HttpEvent<UploadResponse>> {\n\n    const uploadData: FormData = new FormData();\n    \n    uploadData.append('file', file, file.name);\n    return this.http.post<UploadResponse>(this.uploadUrl, uploadData, {\n      reportProgress: true,\n      observe: 'events',\n    });\n  }\n\n  /**\n   * Insert image with Url\n   * @param imageUrl\n   */\n  insertImage(imageUrl: string) {\n    console.log('insertImage: ', imageUrl);\n    this._document.execCommand('insertImage', false, imageUrl);\n  }\n\n  insertVideo(videoUrl: string) {\n    if (videoUrl.match('www.youtube.com')) {\n      this.insertYouTubeVideoTag(videoUrl);\n    }\n    if (videoUrl.match('vimeo.com')) {\n      this.insertVimeoVideoTag(videoUrl);\n    }\n  }\n\n  insertTag(tag: any) {\n    if (tag === null) {\n      return;\n    }\n    const tagS = `${tag.object} -> ${tag.name}`;\n    const size = tagS.length;\n    const tagHtml = `\n      <input id='bolstra.${tag.field}' value='${tagS}'\n        readonly size=${size}\n        style='background-color:lightgrey;\n        padding: 5px;\n        border-radius: 5px;\n        text-align: center;\n        border-left:5px solid red;\n        border-right:5px solid red;\n        border-top:0;\n        border-bottom:0;'\n        ></input>\n    `;\n    this.insertHtml(tagHtml);\n  }\n\n  setDefaultParagraphSeparator(separator: string) {\n    this._document.execCommand('defaultParagraphSeparator', false, separator);\n  }\n\n  createCustomClass(customClass: CustomClass) {\n    let newTag = this.selectedText;\n    if (customClass) {\n      const tagName = customClass.tag ? customClass.tag : 'span';\n      newTag = `<${tagName} class='${customClass.class}'>${this.selectedText}</${tagName}>`;\n    }\n    this.insertHtml(newTag);\n  }\n\n  private insertYouTubeVideoTag(videoUrl: string): void {\n    const id = videoUrl.split('v=')[1];\n    const imageUrl = `https://img.youtube.com/vi/${id}/0.jpg`;\n    const thumbnail = `\n      <div style='position: relative'>\n        <img style='position: absolute; left:200px; top:140px'\n             src=\"https://img.icons8.com/color/96/000000/youtube-play.png\"\n        <a href='${videoUrl}' target='_blank'>\n          <img src=\"${imageUrl}\" alt=\"click to watch\"/>\n        </a>\n      </div>`;\n    this.insertHtml(thumbnail);\n  }\n\n  private insertVimeoVideoTag(videoUrl: string): void {\n    const sub = this.http.get<any>(`https://vimeo.com/api/oembed.json?url=${videoUrl}`).subscribe(data => {\n      const imageUrl = data.thumbnail_url_with_play_button;\n      const thumbnail = `<div>\n        <a href='${videoUrl}' target='_blank'>\n          <img src=\"${imageUrl}\" alt=\"${data.title}\"/>\n        </a>\n      </div>`;\n      this.insertHtml(thumbnail);\n      sub.unsubscribe();\n    });\n  }\n}\n","export interface CustomClass {\n  name: string;\n  class: string;\n  tag?: string;\n}\n\nexport interface Font {\n  name: string;\n  class: string;\n}\n\nexport interface AngularEditorConfig {\n  editable?: boolean;\n  spellcheck?: boolean;\n  height?: 'auto' | string;\n  minHeight?: '0' | string;\n  maxHeight?: 'auto' | string;\n  width?: 'auto' | string;\n  minWidth?: '0' | string;\n  translate?: 'yes' | 'now' | string;\n  enableToolbar?: boolean;\n  showToolbar?: boolean;\n  placeholder?: string;\n  defaultParagraphSeparator?: string;\n  defaultFontName?: string;\n  defaultFontSize?: '1' | '2' | '3' | '4' | '5' | '6' | '7' |string;\n  uploadUrl?: string;\n  fonts?: Font[];\n  customClasses?: CustomClass[];\n}\n\nexport const angularEditorConfig: AngularEditorConfig = {\n  editable: true,\n  spellcheck: true,\n  height: 'auto',\n  minHeight: '0',\n  maxHeight: 'auto',\n  width: 'auto',\n  minWidth: '0',\n  translate: 'yes',\n  enableToolbar: true,\n  showToolbar: true,\n  placeholder: 'Enter text here...',\n  defaultParagraphSeparator: '',\n  defaultFontName: '',\n  defaultFontSize: '',\n  fonts: [\n    {class: 'arial', name: 'Arial'},\n    {class: 'times-new-roman', name: 'Times New Roman'},\n  ],\n  uploadUrl: 'v1/image',\n};\n","import {\n  AfterContentInit,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from \"@angular/forms\";\nimport {AngularEditorConfig, angularEditorConfig} from \"./config\";\nimport {AngularEditorToolbarComponent} from \"./angular-editor-toolbar.component\";\nimport {AngularEditorService} from \"./angular-editor.service\";\nimport {DOCUMENT} from \"@angular/common\";\n\n@Component({\n  selector: 'angular-editor',\n  templateUrl: \"./angular-editor.component.html\",\n  styleUrls: [\"./angular-editor.component.scss\"],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AngularEditorComponent),\n      multi: true\n    }\n  ]\n})\nexport class AngularEditorComponent implements OnInit, ControlValueAccessor, AfterContentInit {\n\n  private onChange: (value: string) => void;\n  private onTouched: () => void;\n\n  placeholder: boolean;\n\n  modeVisual = true;\n  showPlaceholder = false;\n  @Input() id = '';\n  @Input() config: AngularEditorConfig = angularEditorConfig;\n\n  @Output() html;\n\n  @ViewChild('editor') textArea: any;\n  @ViewChild('editorWrapper') editorWrapper: any;\n  @ViewChild('editorToolbar') editorToolbar: AngularEditorToolbarComponent;\n\n  @Output() viewMode = new EventEmitter<boolean>();\n\n  /** emits `blur` event when focused out from the textarea */\n  @Output() blur: EventEmitter<string> = new EventEmitter<string>();\n\n  /** emits `focus` event when focused in to the textarea */\n  @Output() focus: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor(private _renderer: Renderer2, private editorService: AngularEditorService, @Inject(DOCUMENT) private _document: any) {\n  }\n\n  ngOnInit() {\n    this.editorToolbar.id = this.id;\n    this.editorToolbar.fonts = this.config.fonts ? this.config.fonts : angularEditorConfig.fonts;\n    this.editorToolbar.customClasses = this.config.customClasses;\n    this.editorService.uploadUrl = this.config.uploadUrl;\n    if (this.config.showToolbar !== undefined) {\n      this.editorToolbar.showToolbar = this.config.showToolbar;\n    }\n    if (this.config.defaultParagraphSeparator) {\n      this.editorService.setDefaultParagraphSeparator(this.config.defaultParagraphSeparator);\n    }\n  }\n\n  ngAfterContentInit() {\n    if (this.config.defaultFontName) {\n      this.editorToolbar.defaultFontId = this.config.defaultFontName ? this.editorToolbar.fonts.findIndex(x => {\n        return x.name === this.config.defaultFontName;\n      }) : 0;\n      this.editorToolbar.fontId = this.editorToolbar.defaultFontId;\n      this.onEditorFocus();\n      this.editorService.setFontName(this.config.defaultFontName);\n    } else {\n      this.editorToolbar.defaultFontId = 0;\n      this.editorToolbar.fontId = 0;\n    }\n    if (this.config.defaultFontSize) {\n      this.editorToolbar.fontSize = this.config.defaultFontSize;\n      this.onEditorFocus();\n      this.editorService.setFontSize(this.config.defaultFontSize);\n    }\n  }\n\n  /**\n   * Executed command from editor header buttons\n   * @param command string from triggerCommand\n   */\n  executeCommand(command: string) {\n    if (command === 'toggleEditorMode') {\n      this.toggleEditorMode(this.modeVisual);\n    } else if (command !== '') {\n      this.editorService.executeCommand(command);\n      this.exec();\n    }\n\n    this.onEditorFocus();\n  }\n\n  /**\n   * focus event\n   */\n  onTextAreaFocus(): void {\n    this.focus.emit('focus');\n  }\n\n  /**\n   * blur event\n   */\n  onTextAreaBlur(event: FocusEvent) {\n    /**\n     * save selection if focussed out\n     */\n    this.editorService.saveSelection();\n\n    if (typeof this.onTouched === 'function') {\n      this.onTouched();\n    }\n\n    if (event.relatedTarget != null && (event.relatedTarget as HTMLElement).parentElement.className !== 'angular-editor-toolbar-set') {\n      this.blur.emit('blur');\n    }\n  }\n\n  /**\n   *  focus the text area when the editor is focussed\n   */\n  onEditorFocus() {\n    this.textArea.nativeElement.focus();\n  }\n\n  /**\n   * Executed from the contenteditable section while the input property changes\n   * @param html html string from contenteditable\n   */\n  onContentChange(html: string): void {\n\n    if (typeof this.onChange === 'function') {\n      this.onChange(html);\n      if ((!html || html === '<br>' || html === '') !== this.showPlaceholder) {\n        this.togglePlaceholder(this.showPlaceholder);\n      }\n    }\n  }\n\n  /**\n   * Set the function to be called\n   * when the control receives a change event.\n   *\n   * @param fn a function\n   */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * Set the function to be called\n   * when the control receives a touch event.\n   *\n   * @param fn a function\n   */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Write a new value to the element.\n   *\n   * @param value value to be executed when there is a change in contenteditable\n   */\n  writeValue(value: any): void {\n\n    if ((!value || value === '<br>' || value === '') !== this.showPlaceholder) {\n      this.togglePlaceholder(this.showPlaceholder);\n    }\n\n    if (value === null || value === undefined || value === '' || value === '<br>') {\n      value = null;\n    }\n\n    this.refreshView(value);\n  }\n\n  /**\n   * refresh view/HTML of the editor\n   *\n   * @param value html string from the editor\n   */\n  refreshView(value: string): void {\n    const normalizedValue = value === null ? '' : value;\n    this._renderer.setProperty(this.textArea.nativeElement, 'innerHTML', normalizedValue);\n\n    return;\n  }\n\n  /**\n   * toggles placeholder based on input string\n   *\n   * @param value A HTML string from the editor\n   */\n  togglePlaceholder(value: boolean): void {\n    if (!value) {\n      this._renderer.addClass(this.editorWrapper.nativeElement, 'show-placeholder');\n      this.showPlaceholder = true;\n\n    } else {\n      this._renderer.removeClass(this.editorWrapper.nativeElement, 'show-placeholder');\n      this.showPlaceholder = false;\n    }\n  }\n\n  /**\n   * Implements disabled state for this element\n   *\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean): void {\n    const div = this.textArea.nativeElement;\n    const action = isDisabled ? 'addClass' : 'removeClass';\n    this._renderer[action](div, 'disabled');\n  }\n\n  /**\n   * toggles editor mode based on bToSource bool\n   *\n   * @param bToSource A boolean value from the editor\n   */\n  toggleEditorMode(bToSource: boolean) {\n    let oContent: any;\n    const editableElement = this.textArea.nativeElement;\n\n    if (bToSource) {\n      oContent = this._document.createTextNode(editableElement.innerHTML);\n      editableElement.innerHTML = '';\n\n      const oPre = this._document.createElement('pre');\n      oPre.setAttribute(\"style\", \"margin: 0; outline: none;\");\n      const oCode = this._document.createElement('code');\n      editableElement.contentEditable = false;\n      oCode.id = \"sourceText\";\n      oCode.setAttribute(\"style\", \"white-space: pre-wrap; word-break: keep-all; margin: 0; outline: none; background-color: #fff5b9;\");\n      oCode.contentEditable = 'true';\n      oCode.appendChild(oContent);\n      oPre.appendChild(oCode);\n      editableElement.appendChild(oPre);\n\n      this._document.execCommand(\"defaultParagraphSeparator\", false, \"div\");\n\n      this.modeVisual = false;\n      this.viewMode.emit(false);\n      oCode.focus();\n    } else {\n      if (this._document.all) {\n        editableElement.innerHTML = editableElement.innerText;\n      } else {\n        oContent = this._document.createRange();\n        oContent.selectNodeContents(editableElement.firstChild);\n        editableElement.innerHTML = oContent.toString();\n      }\n      editableElement.contentEditable = true;\n      this.modeVisual = true;\n      this.viewMode.emit(true);\n      this.onContentChange(editableElement.innerHTML);\n      editableElement.focus();\n    }\n    this.editorToolbar.setEditorMode(!this.modeVisual);\n  }\n\n  /**\n   * toggles editor buttons when cursor moved or positioning\n   *\n   * Send a node array from the contentEditable of the editor\n   */\n  exec() {\n    this.editorToolbar.triggerButtons();\n\n    let userSelection;\n    if (window.getSelection) {\n      userSelection = window.getSelection();\n    }\n\n    let a = userSelection.focusNode;\n    const els = [];\n    while (a && a.id !== 'editor') {\n      els.unshift(a);\n      a = a.parentNode;\n    }\n    this.editorToolbar.triggerBlocks(els);\n  }\n\n  onKeyDown(e: KeyboardEvent) {\n    if (e.code === 'Enter') {\n      this.editorService.insertHtml('<br><br>');\n      return false;\n    }\n  }\n}\n","import {Component, ElementRef, EventEmitter, Inject, Output, Renderer2, ViewChild} from '@angular/core';\nimport {AngularEditorService} from './angular-editor.service';\nimport {HttpResponse} from '@angular/common/http';\nimport {DOCUMENT} from '@angular/common';\nimport {CustomClass, Font} from './config';\n\n@Component({\n  selector: 'angular-editor-toolbar',\n  templateUrl: './angular-editor-toolbar.component.html',\n  styleUrls: ['./angular-editor-toolbar.component.scss']\n})\n\nexport class AngularEditorToolbarComponent {\n  id = '';\n  htmlMode = false;\n  showToolbar = true;\n  linkSelected = false;\n  block = 'default';\n  defaultFontId;\n  fontId = 0;\n  fontSize = '5';\n  fonts: Font[];\n\n  customClassId = -1;\n  customClasses: CustomClass[];\n  currentTag: any = null;\n\n  tagMap = {\n    BLOCKQUOTE: 'indent',\n    A: 'link'\n  };\n\n  select = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'P', 'PRE', 'DIV'];\n\n  buttons = ['bold', 'italic', 'underline', 'strikeThrough', 'subscript', 'superscript', 'justifyLeft', 'justifyCenter',\n    'justifyRight', 'justifyFull', 'indent', 'outdent', 'insertUnorderedList', 'insertOrderedList', 'link'];\n\n  tagGroups = [\n    {name: 'Contact', tags: [\n      {name: 'First Name', field: 'accountUser.firstName', object: 'Contact'},\n      {name: 'Last Name', field: 'accountUser.lastName', object: 'Contact'}\n    ]},\n    {name: 'Account', tags: [\n      {name: 'Account Title', field: 'account.title', object: 'Account'}\n    ]},\n    {name: 'User', tags: [\n      {name: 'First Name', field: 'accountUser.firstName', object: 'User'},\n      {name: 'Last Name', field: 'accountUser.lastName',  object: 'User'},\n    ]}\n  ];\n\n  @Output() execute: EventEmitter<string> = new EventEmitter<string>();\n\n  @ViewChild('fileInput') myInputFile: ElementRef;\n\n  constructor(private _renderer: Renderer2,\n              private editorService: AngularEditorService, @Inject(DOCUMENT) private _document: any) {\n  }\n\n  /**\n   * Trigger command from editor header buttons\n   * @param command string from toolbar buttons\n   */\n  triggerCommand(command: string) {\n    this.execute.emit(command);\n  }\n\n  /**\n   * highlight editor buttons when cursor moved or positioning\n   */\n  triggerButtons() {\n    if (!this.showToolbar) {\n      return;\n    }\n    this.buttons.forEach(e => {\n      const result = this._document.queryCommandState(e);\n      const elementById = this._document.getElementById(e + '-' + this.id);\n      if (result) {\n        this._renderer.addClass(elementById, 'active');\n      } else {\n        this._renderer.removeClass(elementById, 'active');\n      }\n    });\n  }\n\n  /**\n   * trigger highlight editor buttons when cursor moved or positioning in block\n   */\n  triggerBlocks(nodes: Node[]) {\n    if (!this.showToolbar) {\n      return;\n    }\n    this.linkSelected = nodes.findIndex(x => x.nodeName === 'A') > -1;\n    let found = false;\n    this.select.forEach(y => {\n      const node = nodes.find(x => x.nodeName === y);\n      if (node !== undefined && y === node.nodeName) {\n        if (found === false) {\n          this.block = node.nodeName.toLowerCase();\n          found = true;\n        }\n      } else if (found === false) {\n        this.block = 'default';\n      }\n    });\n\n    found = false;\n    if (this.fonts) {\n      this.fonts.forEach((y, index) => {\n        const node = nodes.find(x => {\n          if (x instanceof HTMLFontElement) {\n            return x.face === y.name;\n          }\n        });\n        if (node !== undefined) {\n          if (found === false) {\n            this.fontId = index;\n            found = true;\n          }\n        } else if (found === false) {\n          this.fontId = this.defaultFontId;\n        }\n      });\n    }\n\n    found = false;\n    if (this.customClasses) {\n      this.customClasses.forEach((y, index) => {\n        const node = nodes.find(x => {\n          if (x instanceof Element) {\n            return x.className === y.class;\n          }\n        });\n        if (node !== undefined) {\n          if (found === false) {\n            this.customClassId = index;\n            found = true;\n          }\n        } else if (found === false) {\n          this.customClassId = -1;\n        }\n      });\n    }\n\n    Object.keys(this.tagMap).map(e => {\n      const elementById = this._document.getElementById(this.tagMap[e] + '-' + this.id);\n      const node = nodes.find(x => x.nodeName === e);\n      if (node !== undefined && e === node.nodeName) {\n        this._renderer.addClass(elementById, 'active');\n      } else {\n        this._renderer.removeClass(elementById, 'active');\n      }\n    });\n  }\n\n  /**\n   * insert URL link\n   */\n  insertUrl() {\n    const url = prompt('Insert URL link', `https://`);\n    if (url && url !== '' && url !== `https://`) {\n      this.editorService.createLink(url);\n    }\n  }\n\n  /**\n   * insert Vedio link\n   */\n  insertVideo() {\n    this.execute.emit('');\n    const url = prompt('Insert Video link', `https://`);\n    if (url && url !== '' && url !== `https://`) {\n      this.editorService.insertVideo(url);\n    }\n  }\n\n  /**\n   * insert Vedio link\n   */\n  insertTag() {\n    this.execute.emit('');\n    this.editorService.insertTag(this.currentTag);\n    this.currentTag = null;\n    this.execute.emit('');\n  }\n\n  /** insert color */\n  insertColor(color: string, where: string) {\n    this.editorService.insertColor(color, where);\n    this.execute.emit('');\n  }\n\n  /**\n   * set font Name/family\n   * @param fontId number\n   */\n  setFontName(fontId: number): void {\n    this.editorService.setFontName(this.fonts[fontId].name);\n    this.execute.emit('');\n  }\n\n  /**\n   * set font Size\n   * @param fontSize string\n   */\n  setFontSize(fontSize: string): void {\n    this.editorService.setFontSize(fontSize);\n    this.execute.emit('');\n  }\n\n  /**\n   * toggle editor mode (WYSIWYG or SOURCE)\n   * @param m boolean\n   */\n  setEditorMode(m: boolean) {\n    const toggleEditorModeButton = this._document.getElementById('toggleEditorMode' + '-' + this.id);\n    if (m) {\n      this._renderer.addClass(toggleEditorModeButton, 'active');\n    } else {\n      this._renderer.removeClass(toggleEditorModeButton, 'active');\n    }\n    this.htmlMode = m;\n  }\n\n  /**\n   * Upload image when file is selected\n   */\n  onFileChanged(event) {\n    const file = event.target.files[0];\n    if (file.type.includes('image/')) {\n      this.editorService.uploadImage(file).subscribe(e => {\n        if (e instanceof HttpResponse) {\n          this.execute.emit('');\n          this.editorService.insertImage(e.body.imageUrl);\n          this.fileReset();\n        }\n      });\n    }\n  }\n\n  /**\n   * Reset Input\n   */\n  fileReset() {\n    this.myInputFile.nativeElement.value = '';\n  }\n\n  /**\n   * Set custom class\n   */\n  setCustomClass(classId: number) {\n    this.editorService.createCustomClass(this.customClasses[classId]);\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {AngularEditorComponent} from './angular-editor.component';\nimport {AngularEditorToolbarComponent} from \"./angular-editor-toolbar.component\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {CommonModule} from \"@angular/common\";\n\n@NgModule({\n  imports: [\n    CommonModule, FormsModule, ReactiveFormsModule\n  ],\n  declarations: [AngularEditorComponent, AngularEditorToolbarComponent],\n  exports: [AngularEditorComponent, AngularEditorToolbarComponent]\n})\nexport class AngularEditorModule {\n}\n"]}